#!/usr/bin/env node

/**
 * Module dependencies.
 */

const App = require('../app');
const debug = require('debug')('UAuth:server');
const http = require('http');
const cluster = require('cluster');
const os = require('os');


let port = normalizePort(process.env.PORT || '65001');


if (process.env.NODE_ENV !== 'production') {
	listen(port);
} else {
	if (cluster.isMaster) {
		os.cpus().forEach(() => cluster.fork());
	} else {
		listen(port, '127.0.0.1');
	}
}

/**
 * Listen on provided port, on all network interfaces.
 */

function listen(port, addr = '0.0.0.0') {
	const app = App();
	app.set('port', port);
	const server = http.createServer(app);
	server.listen(port);
	server.on('error', onError);
	server.on('listening', () => {
		let addr = server.address();
		let bind = typeof addr === 'string'
			? 'pipe ' + addr
			: 'port ' + addr.port;
		debug('Listening on ' + bind);
	});
	return app;
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	let port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	let bind = typeof port === 'string'
		? 'Pipe ' + port
		: 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

